include(ExternalProject)

set(PREFIX nodeeditor)
set(GIT_URL https://github.com/paceholder/nodeeditor.git)
set(GIT_TAG 2.1.3)

set(NODE_EDITOR_INSTALL_DIR ${CMAKE_BINARY_DIR}/externals/ CACHE PATH "" FORCE)

find_package(Qt5 COMPONENTS Core Widgets REQUIRED)

# It doesn't deploy .dylib/.so/.dll for some reason
set(NODE_EDITOR_BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)

ExternalProject_Add(${PREFIX}
  GIT_REPOSITORY ${GIT_URL}
  GIT_TAG ${GIT_TAG}
  PREFIX "${CMAKE_CURRENT_BINARY_DIR}"
  UPDATE_COMMAND ""
  PATCH_COMMAND ""
  CMAKE_ARGS ${CL_ARGS} -DQt5_DIR=${Qt5_DIR} -DBUILD_SHARED_LIBS=${NODE_EDITOR_BUILD_SHARED_LIBS} -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=${NODE_EDITOR_INSTALL_DIR}
  TEST_COMMAND ""
  )

# --- WINDOWS
if (WIN32)
  set(NODE_EDITOR_BINARY_DIR ${NODE_EDITOR_INSTALL_DIR}/bin CACHE PATH "" FORCE)
  set(NODE_EDITOR_INCLUDE_DIR ${NODE_EDITOR_INSTALL_DIR}/include CACHE PATH "" FORCE)
  set(NODE_EDITOR_LIBRARY_DIR ${NODE_EDITOR_INSTALL_DIR}/lib CACHE PATH "" FORCE)

  set(NODE_EDITOR_LIBRARY_RELEASE nodes.lib CACHE STRING "")
  set(NODE_EDITOR_LIBRARY_DEBUG nodes${CMAKE_DEBUG_POSTFIX}.lib CACHE STRING "")

  set(NODE_EDITOR_BINARY_RELEASE nodes.dll CACHE STRING "")
  set(NODE_EDITOR_BINARY_DEBUG nodes${CMAKE_DEBUG_POSTFIX}.dll CACHE STRING "")
endif (WIN32)

if (UNIX AND NOT APPLE)
  set(NODE_EDITOR_BINARY_DIR ${NODE_EDITOR_INSTALL_DIR}/lib CACHE PATH "" FORCE)
  set(NODE_EDITOR_INCLUDE_DIR ${NODE_EDITOR_INSTALL_DIR}/include CACHE PATH "" FORCE)
  set(NODE_EDITOR_LIBRARY_DIR ${NODE_EDITOR_INSTALL_DIR}/lib CACHE PATH "" FORCE)

  if (GENERATOR_IS_MULTI_CONFIG)
    set(NODE_EDITOR_LIBRARY_RELEASE nodes CACHE STRING "")
    set(NODE_EDITOR_LIBRARY_DEBUG nodes${CMAKE_DEBUG_POSTFIX} CACHE STRING "")

    set(NODE_EDITOR_BINARY_RELEASE nodes.so CACHE STRING "")
    set(NODE_EDITOR_BINARY_DEBUG nodes${CMAKE_DEBUG_POSTFIX}.so CACHE STRING "")
  else ()
    set(NODE_EDITOR_LIBRARY nodes CACHE STRING "")
    set(NODE_EDITOR_BINARY nodes.so CACHE STRING "")
  endif ()

endif ()

if (APPLE)
  set(NODE_EDITOR_BINARY_DIR ${NODE_EDITOR_INSTALL_DIR}/bin CACHE PATH "" FORCE)
  set(NODE_EDITOR_INCLUDE_DIR ${NODE_EDITOR_INSTALL_DIR}/include CACHE PATH "" FORCE)
  set(NODE_EDITOR_LIBRARY_DIR ${NODE_EDITOR_INSTALL_DIR}/lib CACHE PATH "" FORCE)

  set(NODE_EDITOR_LIBRARY_RELEASE nodes CACHE STRING "")
  set(NODE_EDITOR_LIBRARY_DEBUG nodes${CMAKE_DEBUG_POSTFIX} CACHE STRING "")

  set(NODE_EDITOR_BINARY_RELEASE nodes.dylib CACHE STRING "")
  set(NODE_EDITOR_BINARY_DEBUG nodes${CMAKE_DEBUG_POSTFIX}.dylib CACHE STRING "")
endif (APPLE)

set(NODE_EDITOR_BINARIES_RELEASE ${NODE_EDITOR_BINARY_DIR}/${NODE_EDITOR_BINARY_RELEASE} CACHE INTERNAL "" FORCE)
set(NODE_EDITOR_BINARIES_DEBUG ${NODE_EDITOR_BINARY_DIR}/${NODE_EDITOR_BINARY_DEBUG} CACHE INTERNAL "" FORCE)

if (GENERATOR_IS_MULTI_CONFIG)
  set(NODE_EDITOR_BINARIES ${NODE_EDITOR_BINARIES_RELEASE} ${NODE_EDITOR_BINARIES_DEBUG} CACHE INTERNAL "" FORCE)
  set(NODE_EDITOR_LIBRARY
    optimized ${NODE_EDITOR_LIBRARY_RELEASE}
    debug ${NODE_EDITOR_LIBRARY_DEBUG}
    CACHE INTERNAL "" FORCE
    )
else ()
  set(NODE_EDITOR_BINARIES ${NODE_EDITOR_BINARY} CACHE INTERNAL "" FORCE)
  set(NODE_EDITOR_LIBRARY ${NODE_EDITOR_LIBRARY} CACHE INTERNAL "" FORCE)
endif ()

if (WIN32)
  install(FILES ${NODE_EDITOR_BINARIES} DESTINATION "bin")
  install(FILES ${NODE_EDITOR_LIBRARY_DIR}/${NODE_EDITOR_LIBRARY_RELEASE} DESTINATION "lib")
  install(FILES ${NODE_EDITOR_LIBRARY_DIR}/${NODE_EDITOR_BINARY_DEBUG} DESTINATION "lib")
endif (WIN32)
